<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Start Coding | Seven Steps]]></title>
  <link href="http://blog.trevoke.net/blog/categories/start-coding/atom.xml" rel="self"/>
  <link href="http://blog.trevoke.net/"/>
  <updated>2014-04-06T23:37:58-04:00</updated>
  <id>http://blog.trevoke.net/</id>
  <author>
    <name><![CDATA[Aldric “Trevoke” Giacomoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby]]></title>
    <link href="http://blog.trevoke.net/blog/2011/01/27/ruby/"/>
    <updated>2011-01-27T20:26:14-05:00</updated>
    <id>http://blog.trevoke.net/blog/2011/01/27/ruby</id>
    <content type="html"><![CDATA[<p>First, <a title="official Ruby site" href="http://www.ruby-lang.org/en/" target="_blank">get Ruby</a>. Install it as explained on the website. Once you&rsquo;re more comfortable with it, in a few weeks, you can check out <a href="http://rvm.beginrescueend.com/" target="_blank">RVM</a>. Not now though &ndash; you&rsquo;d just confuse yourself.</p>

<p>The two important command-line tools are going to be &ldquo;irb&rdquo; and &ldquo;ruby&rdquo;. For development, you will be able to use tools like emacs, vim, Jetbrains Rubymine, or Eclipse. Ruby support is quite widespread.</p>

<p>Create a temporary directory and get cozy inside.</p>

<p>Right off the bat, how would you write a test?
You would create a file called &ldquo;my_test.rb&rdquo; (It is a good naming convention, &lsquo;something_test.rb&rsquo;).</p>

<p>[ruby]require &lsquo;test/unit&rsquo;
class MyTest &lt; Test::Unit::TestCase
def test_addition_is_not_broken
assert_equal(10, 5+5)
end
  def test_addition_is_not_broken_but_i_am</p>

<pre><code>assert_equal(10, 5)
</code></pre>

<p>  end
end
[/ruby]</p>

<p>A couple of things of note:</p>

<ul>
    <li>"require" is how you load external libraries.</li>
    <li>The test class name ("SomethingTest") is a convention. Follow it and avoid pain.</li>
    <li>The test method name also follows a convention : "test_" . Again, follow it and avoid pain.</li>
    <li>Indentation is two spaces by convention. Follow, Avoid.</li>
    <li>Parentheses for method calls are optional, but it's good form to put parentheses if there are two or more arguments to a method. Also, parentheses will save you if the parser has issues parsing. Remember that.</li>
</ul>


<p>To run that, you would simply call &ldquo;ruby my_test.rb&rdquo; and see one test succeed and one test fail.</p>

<p>How would you write a simple program?
Create a file called &ldquo;myprog.rb&rdquo; and put the following inside:</p>

<p>[ruby]
def palindromize input
  input.reverse
end</p>

<p>puts &quot;Give me something and we&rsquo;ll see if it&rsquo;s a palindrome!&quot;
input = gets.chomp
puts palindromize(input)
[/ruby]</p>

<p>This would be run, like the test, with &ldquo;ruby myprog.rb&rdquo;
Some things to note:</p>

<ul>
    <li>"gets.chomp" -- Ruby, by default, captures the return key being pressed. Chomp is necessary to remove that special character.</li>
    <li>Did you notice how I put parentheses around "palindromize(input)" ? It's so that both the Ruby parser and human readers stay sane when reading the code.</li>
</ul>


<p>Things of note:</p>

<p>Ruby documentation: <a href="http://ruby-doc.org/" target="_blank"><a href="http://ruby-doc.org/">http://ruby-doc.org/</a></a>, <a href="http://ruby-doc.org/core" target="_blank"><a href="http://ruby-doc.org/core">http://ruby-doc.org/core</a></a> &mdash; that will get you started. The documentation is excellent until you get to some arcane features &mdash; so not to worry, for now.</p>

<p>Wanna talk to people? You can go to <a href="http://www.ruby-forum.com/" target="_blank"><a href="http://www.ruby-forum.com/">http://www.ruby-forum.com/</a></a> (Ruby big names, such as David Black, JEG2 and even Matz, the creator of the language) are active there, and everyone is nice. You can also go to the Freenode server on IRC, channel #ruby.</p>

<p>Let me know if you think I could add things to this tutorial or if you have questions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With a Programming Language]]></title>
    <link href="http://blog.trevoke.net/blog/2011/01/27/getting-started-with-a-programming-language/"/>
    <updated>2011-01-27T19:38:35-05:00</updated>
    <id>http://blog.trevoke.net/blog/2011/01/27/getting-started-with-a-programming-language</id>
    <content type="html"><![CDATA[<p>Hello, and welcome to a blog series about programming languages. The goal is to explain how to get started in a few quick steps : install, write a simple test, write a simple program. Hopefully, just enough information to get you started without getting in your way.</p>

<p>I recommend you try your chops with <a href="http://projecteuler.net" target="_blank"><a href="http://projecteuler.net">http://projecteuler.net</a></a> &ndash; fun algorithm implementation. A good way to learn a programming language.</p>

<p>When talking to people, please remember <a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank">How to Ask Questions the Smart Way</a>.</p>
]]></content>
  </entry>
  
</feed>
