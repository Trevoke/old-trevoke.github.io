<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Agile | Seven Steps]]></title>
  <link href="http://blog.trevoke.net/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://blog.trevoke.net/"/>
  <updated>2014-04-03T16:00:18-04:00</updated>
  <id>http://blog.trevoke.net/</id>
  <author>
    <name><![CDATA[Aldric “Trevoke” Giacomoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shu Ha Ri and Evolution of a Skill]]></title>
    <link href="http://blog.trevoke.net/blog/2014/02/18/shu-ha-ri-and-evolution-of-a-skill/"/>
    <updated>2014-02-18T15:17:06-05:00</updated>
    <id>http://blog.trevoke.net/blog/2014/02/18/shu-ha-ri-and-evolution-of-a-skill</id>
    <content type="html"><![CDATA[<p>Shu Ha Ri comes from the world of Japanese Noh theater, and has been since attached to the world of martial arts and <a title="Alistair Cockburn's words on Shu Ha Ri" href="http://alistair.cockburn.us/Shu+Ha+Ri">Agile development</a>. Roughly, &ldquo;shu ha ri&rdquo; means &ldquo;learn / detach / transcend&rdquo;. The link has some words about that meaning. I&rsquo;d like to talk about my particular take on Shu Ha Ri, which came out of a parking-lot conversation with a martial arts teacher friend of mine:</p>

<ol>
    <li>Shu. Do the damn technique.</li>
    <li>Ha. Vary the damn technique.</li>
    <li>Ri. You don't need the damn technique.</li>
</ol>


<p>And here is the slightly longer interpretation.</p>

<p>SHU: right foot in front, grab the left wrist from the front with the right hand. Study the particular wrist escape that has been taught in this situation. In Agile words: be rigorous about your Agile practice. Do it &ldquo;dumbly&rdquo; until you get good at it and everyone in your team is OK with it.</p>

<p>HA: grab some wrist in some way, and play with that wrist escape. Add footwork. See what works and what doesn&rsquo;t. In Agile words, now&rsquo;s the time to see when is a good time for standup, what should be said, how long the standup should take. Or maybe change the beginning of the iteration; or how you do story breakdown. Pick ONE variable, change it, and learn from what happened, whether it worked or it didn&rsquo;t (&ldquo;worked&rdquo; is a variable term, at this point of your growth, you&rsquo;ll know it well enough when you see it).</p>

<p>RI: It&rsquo;s not about a wrist grab anymore, but about much more fundamental principles. Detached from the technique, or the labels of &ldquo;wrist grab&rdquo; and &ldquo;wrist escape&rdquo;, it simply becomes about the right movement producing the right result (&ldquo;right&rdquo; is a variable term, at this point of your growth, you&rsquo;ll know it without seeing it). In Agile words, you understand why a standup is just one example of a practical application of the Agile principles, and you are able to create custom applications of the principle for your teams, so that they can be Agile in the way that works best for them.</p>

<p>&nbsp;</p>

<p>You may notice that HA and RI seem just a little similar from the point of vagueness: you&rsquo;ll know it when you see it. It takes a long time to work through HA, and the line between the two is fairly definite, but hard to find. So practice, practice, practice. Or rather, perfect practice, perfect practice, perfect practice. And check your ego at the door.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Rails Dying?]]></title>
    <link href="http://blog.trevoke.net/blog/2013/02/02/is-rails-dying/"/>
    <updated>2013-02-02T17:29:28-05:00</updated>
    <id>http://blog.trevoke.net/blog/2013/02/02/is-rails-dying</id>
    <content type="html"><![CDATA[<p>More to the point, should Rails die?</p>

<p>Rails brought a lot of great things &ndash; it made it dumb easy to package an entire app together. It abstracted the complexity of the storage layer. It created an entire market. Things like Heroku, Railsonfire/codeship and other companies turned a profit by extending the benefits of Rails. And things like Capistrano were born.</p>

<p>Everything that can be automated should be automated.</p>

<p>&nbsp;</p>

<p>This has brought great things. And people wrote more tests, and life was good. But then, Rails apps grew, and people realized they had written them badly &ndash; because they interleaved their code within Rails, instead of using Rails as a layer and building their code on top of it, carefully segmenting the access points to that layer. Gosh, that sounds like work! Enter things like Avdi Grimm&rsquo;s Object On Rails. And the Rails community re-learns things that the Java community has suffered through and grown past. Dependency Injection is making a comeback, Ruby-style. People use TDD as an indicator of design smells &ndash; if you have to boot up Rails to run your tests, you&rsquo;re doing something wrong! Although of course SOME tests require the entire Rails stack, but we call these Capybara tests, because &ldquo;end-to-end&rdquo; is ugly, and capybaras are much prettier to look at.</p>

<p>And then, on the other hand, you have Sinatra, and Backbone.js, and other things that are focused on doing one thing and doing it well.</p>

<p>Now we have everything that Rails has taught the Ruby world &ndash; segment your logic, stay away from expensive code (the only currency here is time, and this is a very important thing to realize). Your TDD loop should be very short &ndash; you can watch some of Gary Bernhardt&rsquo;s screencasts on Destroy All Software to learn mor about this. We have Capistrano, and Capybara. We have RSpec. We have Opal, a Ruby-to-Javascript compiler.</p>

<p>And in case Opal is too weird for you, you&rsquo;ve got the Backbone.js world, where you have to make all these exact decisions over again.</p>

<p>You&rsquo;ve got Sinatra, a wonderful &ldquo;controller&rdquo;. Sinatra is a great place to put your API and test it. Because that is the only thing Sinatra gives you, you feel the pain every time you add something &mdash; you have to add it.</p>

<p>And your storage is now distributed. Imagine &hellip; Backbone.js front-end, Sinatra in the middle, and your distributed storage of choice on the other side: Google Drive, Apple Cloud, Dropbox, MediaFire &hellip; You pick it, you store to it. Users now carry their data everywhere. Virtually speaking, of course. Gosh, sounds like you&rsquo;re even reducing costs.</p>

<p>&nbsp;</p>

<p>So now, we face the challenge the health world has been trying to solve for over a decade &ndash; how do you share information between proprietary systems? After all, the user is the one who&rsquo;s suffering.</p>

<p>This is an entirely different blog post &ndash; how much of &ldquo;your&rdquo; data really is yours? How much could be shared? You know.. Like one of those virtual business cards, I suppose. You&rsquo;d have a JSON object behind a secure server where the user stores THEIR information, and you ask for permission to read that one object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Art of Agile Planning / Art of Agile Delivery, by James Shore and Diana Larsen]]></title>
    <link href="http://blog.trevoke.net/blog/2011/11/02/art-of-agile-planning-art-of-agile-delivery-by-james-shore-and-diana-larsen/"/>
    <updated>2011-11-02T12:44:46-04:00</updated>
    <id>http://blog.trevoke.net/blog/2011/11/02/art-of-agile-planning-art-of-agile-delivery-by-james-shore-and-diana-larsen</id>
    <content type="html"><![CDATA[<p>The Art of Agile Planning (#aoap on Twitter, and AOAP from now on) is a 2-day course. The focus is on understanding the higher-level constructs of Agile and how they imbricate. In the course, one learns how the ideal Agile team is composed (hint: it&rsquo;s cross-functional and co-located) and what practices and techniques will be used to organize at all levels, from the developers' standup to the customers' research for the next best value-delivering feature, including how to properly create a feature that developers can work on and how to best break it down into stories (and then into tasks).</p>

<p>The Art of Agile Delivery (#aoad on Twitter, and AOAD from now on) is a 3-day course. The focus expands from AOAP, both into further details in the iteration (how do developers best produce quality code without defects) and into further details for customers (how do we figure out who we seek and who we need to interact with).</p>

<p>Both courses feature activities and mini-games to help accelerate and cement learning. Both courses, of course, feature James and Diana, whose presence is invaluable. It took me a day or two to get accustomed enough to start asking questions – don&rsquo;t wait, you only have those few days, and they can both bring great insight into whatever questions or problems you may have. Their first answer may be a little idealistic or snarky (I heard a once or twice “don&rsquo;t do that”), but after the chuckles die down, they go into further detail and, asking for clarifications where needed, they explain the ideal of the practice(s), skill(s) and/or technique(s) involved and how to try and rectify or adapt to a less-than-ideal situation. Among the small things that make this course great: there are slidebooks given, where the slide is on the left and there is room to take notes on the right, and there are &lsquo;facilitational aids&rsquo; (as Diana Larsen put it, “because toys aren&rsquo;t tax-deductible”) for those of us who need to fiddle with something to learn better.</p>

<p>It is my understanding that both courses can be taken separately. I would probably not recommend doing so, as AOAD truly does build on top of AOAP. I will, however, echo James Shore&rsquo;s recommendation. Take care of yourself. Don&rsquo;t leave after each day and drink/party/work. Get some air, see your family, sleep. Give your body and your mind a rest. This course is five days and very intensive.</p>

<p>I&rsquo;ve tried my best to give you the essence without the substance. Any description of the substance would simply be sub-par and ruin the experience. This course has to be lived. Besides, the course evolves based on the feedback it receives, so hopefully when you take the course, it&rsquo;ll be even better than when I took it!</p>

<p>AOAD and AOAP together show that Agile truly is an organizational-scale operation, and can only have limited success if not applied at the manager and customer level.</p>

<p>A last note – this course set can be taken with total strangers, but I took it as a training course with my entire company. They were people with whom I am used to working, people with whom I&rsquo;ll be talking about this course for long after it is over, and it allowed some slightly different dynamics to permeate the courses – in my eyes, for the better, but I&rsquo;m clearly biased.</p>
]]></content>
  </entry>
  
</feed>
